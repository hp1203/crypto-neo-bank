// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ATokenAdded extends ethereum.Event {
  get params(): ATokenAdded__Params {
    return new ATokenAdded__Params(this);
  }
}

export class ATokenAdded__Params {
  _event: ATokenAdded;

  constructor(event: ATokenAdded) {
    this._event = event;
  }

  get name(): string {
    return this._event.parameters[0].value.toString();
  }

  get decimal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get icon(): string {
    return this._event.parameters[3].value.toString();
  }

  get token(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get cToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class AccountCreated extends ethereum.Event {
  get params(): AccountCreated__Params {
    return new AccountCreated__Params(this);
  }
}

export class AccountCreated__Params {
  _event: AccountCreated;

  constructor(event: AccountCreated) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _metadata(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Erc20DepositMade extends ethereum.Event {
  get params(): Erc20DepositMade__Params {
    return new Erc20DepositMade__Params(this);
  }
}

export class Erc20DepositMade__Params {
  _event: Erc20DepositMade;

  constructor(event: Erc20DepositMade) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Erc20WithdrawMade extends ethereum.Event {
  get params(): Erc20WithdrawMade__Params {
    return new Erc20WithdrawMade__Params(this);
  }
}

export class Erc20WithdrawMade__Params {
  _event: Erc20WithdrawMade;

  constructor(event: Erc20WithdrawMade) {
    this._event = event;
  }

  get _withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currency(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EthDepositMade extends ethereum.Event {
  get params(): EthDepositMade__Params {
    return new EthDepositMade__Params(this);
  }
}

export class EthDepositMade__Params {
  _event: EthDepositMade;

  constructor(event: EthDepositMade) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EthTransferMade extends ethereum.Event {
  get params(): EthTransferMade__Params {
    return new EthTransferMade__Params(this);
  }
}

export class EthTransferMade__Params {
  _event: EthTransferMade;

  constructor(event: EthTransferMade) {
    this._event = event;
  }

  get _depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _depositorAccount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _receiverAccount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class EthWithdrawMade extends ethereum.Event {
  get params(): EthWithdrawMade__Params {
    return new EthWithdrawMade__Params(this);
  }
}

export class EthWithdrawMade__Params {
  _event: EthWithdrawMade;

  constructor(event: EthWithdrawMade) {
    this._event = event;
  }

  get _withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Neobank__getAccountDetailsResultValue0Struct extends ethereum.Tuple {
  get accountNumber(): BigInt {
    return this[0].toBigInt();
  }

  get metadata(): string {
    return this[1].toString();
  }
}

export class Neobank__myAccountsResultValue0Struct extends ethereum.Tuple {
  get accountNumber(): BigInt {
    return this[0].toBigInt();
  }

  get metadata(): string {
    return this[1].toString();
  }
}

export class Neobank extends ethereum.SmartContract {
  static bind(address: Address): Neobank {
    return new Neobank("Neobank", address);
  }

  getAccountDetails(
    _owner: Address,
    _accountNumber: BigInt
  ): Neobank__getAccountDetailsResultValue0Struct {
    let result = super.call(
      "getAccountDetails",
      "getAccountDetails(address,uint256):((uint256,string))",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_accountNumber)
      ]
    );

    return changetype<Neobank__getAccountDetailsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAccountDetails(
    _owner: Address,
    _accountNumber: BigInt
  ): ethereum.CallResult<Neobank__getAccountDetailsResultValue0Struct> {
    let result = super.tryCall(
      "getAccountDetails",
      "getAccountDetails(address,uint256):((uint256,string))",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_accountNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Neobank__getAccountDetailsResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getContractBalance(): BigInt {
    let result = super.call(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalance",
      "getContractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC20Balance(_accountNumber: BigInt, currency: Address): BigInt {
    let result = super.call(
      "getERC20Balance",
      "getERC20Balance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_accountNumber),
        ethereum.Value.fromAddress(currency)
      ]
    );

    return result[0].toBigInt();
  }

  try_getERC20Balance(
    _accountNumber: BigInt,
    currency: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC20Balance",
      "getERC20Balance(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_accountNumber),
        ethereum.Value.fromAddress(currency)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getERC20BalanceWithInterest(
    _accountNumber: BigInt,
    erc20Token: Address
  ): BigInt {
    let result = super.call(
      "getERC20BalanceWithInterest",
      "getERC20BalanceWithInterest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_accountNumber),
        ethereum.Value.fromAddress(erc20Token)
      ]
    );

    return result[0].toBigInt();
  }

  try_getERC20BalanceWithInterest(
    _accountNumber: BigInt,
    erc20Token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getERC20BalanceWithInterest",
      "getERC20BalanceWithInterest(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_accountNumber),
        ethereum.Value.fromAddress(erc20Token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthBalance(_accountNumber: BigInt): BigInt {
    let result = super.call(
      "getEthBalance",
      "getEthBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_accountNumber)]
    );

    return result[0].toBigInt();
  }

  try_getEthBalance(_accountNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthBalance",
      "getEthBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_accountNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEthBalanceWithInterest(_accountNumber: BigInt): BigInt {
    let result = super.call(
      "getEthBalanceWithInterest",
      "getEthBalanceWithInterest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_accountNumber)]
    );

    return result[0].toBigInt();
  }

  try_getEthBalanceWithInterest(
    _accountNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthBalanceWithInterest",
      "getEthBalanceWithInterest(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_accountNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRelaventAToken(token: Address): Address {
    let result = super.call(
      "getRelaventAToken",
      "getRelaventAToken(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toAddress();
  }

  try_getRelaventAToken(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRelaventAToken",
      "getRelaventAToken(address):(address)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalErc20Balance(_erc20Token: Address): BigInt {
    let result = super.call(
      "getTotalErc20Balance",
      "getTotalErc20Balance(address):(uint256)",
      [ethereum.Value.fromAddress(_erc20Token)]
    );

    return result[0].toBigInt();
  }

  try_getTotalErc20Balance(_erc20Token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalErc20Balance",
      "getTotalErc20Balance(address):(uint256)",
      [ethereum.Value.fromAddress(_erc20Token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalEthBalance(): BigInt {
    let result = super.call(
      "getTotalEthBalance",
      "getTotalEthBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalEthBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalEthBalance",
      "getTotalEthBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  myAccounts(): Array<Neobank__myAccountsResultValue0Struct> {
    let result = super.call(
      "myAccounts",
      "myAccounts():((uint256,string)[])",
      []
    );

    return result[0].toTupleArray<Neobank__myAccountsResultValue0Struct>();
  }

  try_myAccounts(): ethereum.CallResult<
    Array<Neobank__myAccountsResultValue0Struct>
  > {
    let result = super.tryCall(
      "myAccounts",
      "myAccounts():((uint256,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Neobank__myAccountsResultValue0Struct>()
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddRelaventAtokenCall extends ethereum.Call {
  get inputs(): AddRelaventAtokenCall__Inputs {
    return new AddRelaventAtokenCall__Inputs(this);
  }

  get outputs(): AddRelaventAtokenCall__Outputs {
    return new AddRelaventAtokenCall__Outputs(this);
  }
}

export class AddRelaventAtokenCall__Inputs {
  _call: AddRelaventAtokenCall;

  constructor(call: AddRelaventAtokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get decimal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get icon(): string {
    return this._call.inputValues[3].value.toString();
  }

  get token(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get cToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class AddRelaventAtokenCall__Outputs {
  _call: AddRelaventAtokenCall;

  constructor(call: AddRelaventAtokenCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _metadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }
}

export class DepositERC20IntoAccountCall extends ethereum.Call {
  get inputs(): DepositERC20IntoAccountCall__Inputs {
    return new DepositERC20IntoAccountCall__Inputs(this);
  }

  get outputs(): DepositERC20IntoAccountCall__Outputs {
    return new DepositERC20IntoAccountCall__Outputs(this);
  }
}

export class DepositERC20IntoAccountCall__Inputs {
  _call: DepositERC20IntoAccountCall;

  constructor(call: DepositERC20IntoAccountCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DepositERC20IntoAccountCall__Outputs {
  _call: DepositERC20IntoAccountCall;

  constructor(call: DepositERC20IntoAccountCall) {
    this._call = call;
  }
}

export class DepositIntoAccountCall extends ethereum.Call {
  get inputs(): DepositIntoAccountCall__Inputs {
    return new DepositIntoAccountCall__Inputs(this);
  }

  get outputs(): DepositIntoAccountCall__Outputs {
    return new DepositIntoAccountCall__Outputs(this);
  }
}

export class DepositIntoAccountCall__Inputs {
  _call: DepositIntoAccountCall;

  constructor(call: DepositIntoAccountCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accountNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositIntoAccountCall__Outputs {
  _call: DepositIntoAccountCall;

  constructor(call: DepositIntoAccountCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawAmountErc20Call extends ethereum.Call {
  get inputs(): WithdrawAmountErc20Call__Inputs {
    return new WithdrawAmountErc20Call__Inputs(this);
  }

  get outputs(): WithdrawAmountErc20Call__Outputs {
    return new WithdrawAmountErc20Call__Outputs(this);
  }
}

export class WithdrawAmountErc20Call__Inputs {
  _call: WithdrawAmountErc20Call;

  constructor(call: WithdrawAmountErc20Call) {
    this._call = call;
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _accountNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _erc20Token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class WithdrawAmountErc20Call__Outputs {
  _call: WithdrawAmountErc20Call;

  constructor(call: WithdrawAmountErc20Call) {
    this._call = call;
  }
}

export class WithdrawAmountEthCall extends ethereum.Call {
  get inputs(): WithdrawAmountEthCall__Inputs {
    return new WithdrawAmountEthCall__Inputs(this);
  }

  get outputs(): WithdrawAmountEthCall__Outputs {
    return new WithdrawAmountEthCall__Outputs(this);
  }
}

export class WithdrawAmountEthCall__Inputs {
  _call: WithdrawAmountEthCall;

  constructor(call: WithdrawAmountEthCall) {
    this._call = call;
  }

  get amountRequested(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _accountNumber(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawAmountEthCall__Outputs {
  _call: WithdrawAmountEthCall;

  constructor(call: WithdrawAmountEthCall) {
    this._call = call;
  }
}

export class WithdrawMaxEthCall extends ethereum.Call {
  get inputs(): WithdrawMaxEthCall__Inputs {
    return new WithdrawMaxEthCall__Inputs(this);
  }

  get outputs(): WithdrawMaxEthCall__Outputs {
    return new WithdrawMaxEthCall__Outputs(this);
  }
}

export class WithdrawMaxEthCall__Inputs {
  _call: WithdrawMaxEthCall;

  constructor(call: WithdrawMaxEthCall) {
    this._call = call;
  }

  get _accountNumber(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawMaxEthCall__Outputs {
  _call: WithdrawMaxEthCall;

  constructor(call: WithdrawMaxEthCall) {
    this._call = call;
  }
}
